import React, { useState } from 'react';
import { TouchableOpacity, Text, StyleSheet, View, StyleProp, ViewStyle } from 'react-native';
import Animated, { Easing, useSharedValue, withTiming, useAnimatedStyle, runOnJS } from 'react-native-reanimated';
import { Audio } from "expo-av";

interface HeartProps {
  onPress: () => void;
  style?: StyleProp<ViewStyle>;
}

const messages = [
  "Tvoje oƒçi s√∫ ako dve hviezdy! ‚ú®üëÄ",
  "Si neskutoƒçne sexy! üî•",
  "Milujem tvoj √∫smev! üòä‚ù§Ô∏è",
  "Si n√°dhern√°, nem√¥≈æem sa na teba vynad√≠va≈•! üòç",
  "Tvoje vlasy s√∫ √∫≈æasn√©! üíïüíá‚Äç‚ôÄÔ∏è",
  "Si neuveriteƒæne inteligentn√° a m√∫dra! üß†üí°",
  "Tvoja tv√°riƒçka je na zjedenie! ü•∞",
  "M√°m r√°d, keƒè sa na m≈àa tak kr√°sne pozer√°≈°! üëÄüíï",
  "Zbo≈æ≈àujem tvoj pevn√Ω zadoƒçek! üçëüî•",
  "Si najkraj≈°ia ≈æena na svete! üåéüíñ",
  "Milujem, ako vonia≈°! üå∏üëÉ",
  "Si tak ne≈æn√° a z√°rove≈à divok√°! üî•‚ù§Ô∏è",
  "Tvoje pery s√∫ dokonale sladk√©! üíãüç≠",
  "Zbo≈æ≈àujem tvoju pevnos≈• a silu! üí™üî•",
  "Tvoje telo je umeleck√© dielo! üé®üòç",
  "Ka≈æd√Ω tvoj pohyb ma fascinuje! üî•üëÄ",
  "M√°m r√°d, ako sa ku mne t√∫li≈°! ü§ó‚ù§Ô∏è",
  "Si oƒçaruj√∫ca a v√Ωnimoƒçn√°! ‚ú®üåü",
  "Tvoje ruky s√∫ tak jemn√© a pr√≠jemn√©! ü§≤üíï",
  "Si ako magnet, st√°le ma k tebe ≈•ah√°! üß≤‚ù§Ô∏è",
  "Zboz≈àujem, ≈æe sa smejes mojim vtipom ‚ù§Ô∏è",
];

const Heart = ({ onPress, style }: HeartProps) => {
  const [popped, setPopped] = useState(false);
  const [showMessage, setShowMessage] = useState(false);
  const [randomMessage, setRandomMessage] = useState('');

  const scale = useSharedValue(1);
  const translateY = useSharedValue(0);
  const opacity = useSharedValue(1);

  // Function to play pop sound
  const playPopSound = async () => {
    try {
      const { sound } = await Audio.Sound.createAsync(
        require("../assets/sounds/pop.mp3") // Ensure this file exists in the correct path
      );

      await sound.setVolumeAsync(0.3); // Adjust volume (range: 0.0 - 1.0)
      await sound.playAsync();
    } catch (error) {
      console.error("Error playing sound:", error);
    }
  };

  const handlePress = () => {
    playPopSound(); // Play pop sound on press

    scale.value = withTiming(0, { duration: 300, easing: Easing.ease }, () => {
      runOnJS(setPopped)(true);
      runOnJS(setShowMessage)(true);
      runOnJS(setRandomMessage)(messages[Math.floor(Math.random() * messages.length)]);

      // Start animation for text message
      translateY.value = withTiming(-50, { duration: 2000, easing: Easing.out(Easing.exp) });
      opacity.value = withTiming(0, { duration: 4000 }, () => {
        runOnJS(setShowMessage)(false);
      });

      onPress();
    });
  };

  const animatedHeartStyle = useAnimatedStyle(() => ({
    transform: [{ scale: scale.value }],
  }));

  const animatedTextStyle = useAnimatedStyle(() => ({
    transform: [{ translateY: translateY.value }],
    opacity: opacity.value,
  }));

  if (popped && !showMessage) return null;

  return (
    <View style={[styles.container, style]}>
      {!popped && (
        <TouchableOpacity onPress={handlePress} style={styles.heart}>
          <Animated.View style={[styles.heartContainer, animatedHeartStyle]}>
            <Text style={styles.heartText}>‚ù§Ô∏è</Text>
          </Animated.View>
        </TouchableOpacity>
      )}

      {showMessage && (
        <TouchableOpacity onPress={() => setShowMessage(false)}>
          <Animated.View style={[styles.messageContainer, animatedTextStyle]}>
            <Text style={styles.messageText}>{randomMessage}</Text>
          </Animated.View>
        </TouchableOpacity>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    position: 'absolute',
  },
  heart: {
    position: 'absolute',
  },
  heartContainer: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  heartText: {
    fontSize: 40,
  },
  messageContainer: {
    position: "absolute",
    top: "50%", // Moves the top of the box to the center
    left: "50%",
    transform: [{ translateX: -90 }, { translateY: -50 }], // Centers it fully
    zIndex: 9999, // Ensures it's on top
    elevation: 10, // Ensures visibility on Android
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 12,
    minWidth: 180, // Prevents it from being too thin
    maxWidth: "80%", // Prevents it from getting too wide
    alignItems: "center",
    justifyContent: "center",
  },
  messageText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#fff",
    textAlign: "center",
    backgroundColor: "rgba(0, 0, 0, 0.4)", // Semi-transparent black background
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 10,
    flexShrink: 1, // Ensures text doesn't overflow
    flexWrap: "wrap", // Allows text to break naturally
  },
});

export default Heart;
